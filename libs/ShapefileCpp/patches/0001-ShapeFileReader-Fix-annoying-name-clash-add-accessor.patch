From 2eb3a99b686269cece4ce29e8ca462f13eaeed22 Mon Sep 17 00:00:00 2001
From: Alec Leamas <leamas.alec@gmail.com>
Date: Tue, 15 Apr 2025 09:32:48 +0200
Subject: [PATCH 1/4] ShapeFileReader: Fix annoying name clash, add accessors

---
 lib/include/GeometryType.hpp    |  2 +-
 lib/include/ShapefileReader.hpp | 16 ++++++++++++++++
 lib/src/ShapefileReader.cpp     |  6 +++++-
 lib/test/GeometryTypeTest.cpp   |  4 ++--
 4 files changed, 24 insertions(+), 4 deletions(-)

diff --git a/lib/include/GeometryType.hpp b/lib/include/GeometryType.hpp
index 0510463..aab42a3 100644
--- a/lib/include/GeometryType.hpp
+++ b/lib/include/GeometryType.hpp
@@ -8,7 +8,7 @@ namespace shp {
         Point, Line, Polygon, MultiPoint,
         PointZ, LineZ, PolygonZ, MultiPointZ,
         PointM, LineM, PolygonM, MultiPointM,
-        MultiPatch, None
+        MultiPatch, NoGeometry
     };

     std::ostream& operator << (std::ostream& os, const GeometryType& geometryType);
diff --git a/lib/include/ShapefileReader.hpp b/lib/include/ShapefileReader.hpp
index 1135f9a..aed7473 100644
--- a/lib/include/ShapefileReader.hpp
+++ b/lib/include/ShapefileReader.hpp
@@ -33,8 +33,21 @@ namespace shp {

             int count = -1;
             int shapeType = -1;
+            /**
+             * Minimum bounds of all shapes in the file [x, y, z, m].
+             * x and y represent spatial coordinates, while z is elevation
+             * and m is measure value (when present in shapefile).
+             */
             double min[4];
+            /**
+             * Maximum bounds of all shapes in the file [x, y, z, m].
+             * x and y represent spatial coordinates, while z is elevation
+             * and m is measure value (when present in shapefile).
+             */
             double max[4];
+            /**
+             * Total number of features (records) from the DBF file.
+             */
             int numberOfFeatures = 0;

             void getShapeInfo();
@@ -62,6 +75,9 @@ namespace shp {

             ~ShapefileReader();

+            /** Return true if the reader has opened and loaded the shapefile successfully. */
+            bool isOpen();
+
             int getCount();

             GeometryType getGeometryType();
diff --git a/lib/src/ShapefileReader.cpp b/lib/src/ShapefileReader.cpp
index c64adb6..5bb63fb 100644
--- a/lib/src/ShapefileReader.cpp
+++ b/lib/src/ShapefileReader.cpp
@@ -13,6 +13,10 @@ namespace shp {
         DBFClose(dbf);
     }

+    bool ShapefileReader::isOpen() {
+        return shp && dbf;
+    }
+
     void ShapefileReader::getShapeInfo() {
         if (count == -1) {
             SHPGetInfo(shp, &count, &shapeType, min, max);
@@ -60,7 +64,7 @@ namespace shp {
             return GeometryType::MultiPointZ;
         }
         else {
-            return GeometryType::None;
+            return GeometryType::NoGeometry;
         }
     }

diff --git a/lib/test/GeometryTypeTest.cpp b/lib/test/GeometryTypeTest.cpp
index af4db83..bfc5646 100644
--- a/lib/test/GeometryTypeTest.cpp
+++ b/lib/test/GeometryTypeTest.cpp
@@ -11,7 +11,7 @@ TEST(ShapefileTests, geometry_type_multipatch_to_string_test) {

 TEST(ShapefileTests, geometry_type_none_to_string_test) {
   std::stringstream str;
-  shp::GeometryType type = shp::GeometryType::None;
+  shp::GeometryType type = shp::GeometryType::NoGeometry;
   str << type;
   ASSERT_EQ("None", str.str());
 }
@@ -125,4 +125,4 @@ TEST(ShapefileTests, geometry_type_is_polygon_test) {
   ASSERT_TRUE(shp::isPolygon(shp::GeometryType::PolygonM));
   ASSERT_TRUE(shp::isPolygon(shp::GeometryType::PolygonZ));
   ASSERT_FALSE(shp::isPolygon(shp::GeometryType::Line));
-}
\ No newline at end of file
+}
--
2.49.0
